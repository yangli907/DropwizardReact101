/*
 * This file is generated by jOOQ.
*/
package com.yangli907.phome.model.tables.records;


import com.yangli907.phome.model.enums.PhotographerCategory;
import com.yangli907.phome.model.tables.Photographer;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PhotographerRecord extends UpdatableRecordImpl<PhotographerRecord> implements Record7<Integer, String, String, PhotographerCategory, String, Timestamp, Timestamp> {

    private static final long serialVersionUID = -1855259550;

    /**
     * Setter for <code>phollow.photographer.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>phollow.photographer.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>phollow.photographer.userId</code>.
     */
    public void setUserid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>phollow.photographer.userId</code>.
     */
    public String getUserid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>phollow.photographer.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>phollow.photographer.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>phollow.photographer.category</code>.
     */
    public void setCategory(PhotographerCategory value) {
        set(3, value);
    }

    /**
     * Getter for <code>phollow.photographer.category</code>.
     */
    public PhotographerCategory getCategory() {
        return (PhotographerCategory) get(3);
    }

    /**
     * Setter for <code>phollow.photographer.location</code>.
     */
    public void setLocation(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>phollow.photographer.location</code>.
     */
    public String getLocation() {
        return (String) get(4);
    }

    /**
     * Setter for <code>phollow.photographer.createdAt</code>.
     */
    public void setCreatedat(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>phollow.photographer.createdAt</code>.
     */
    public Timestamp getCreatedat() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>phollow.photographer.updatedAt</code>.
     */
    public void setUpdatedat(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>phollow.photographer.updatedAt</code>.
     */
    public Timestamp getUpdatedat() {
        return (Timestamp) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, String, String, PhotographerCategory, String, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, String, String, PhotographerCategory, String, Timestamp, Timestamp> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Photographer.PHOTOGRAPHER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Photographer.PHOTOGRAPHER.USERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Photographer.PHOTOGRAPHER.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<PhotographerCategory> field4() {
        return Photographer.PHOTOGRAPHER.CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Photographer.PHOTOGRAPHER.LOCATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field6() {
        return Photographer.PHOTOGRAPHER.CREATEDAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field7() {
        return Photographer.PHOTOGRAPHER.UPDATEDAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getUserid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerCategory value4() {
        return getCategory();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getLocation();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value6() {
        return getCreatedat();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value7() {
        return getUpdatedat();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord value2(String value) {
        setUserid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord value3(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord value4(PhotographerCategory value) {
        setCategory(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord value5(String value) {
        setLocation(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord value6(Timestamp value) {
        setCreatedat(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord value7(Timestamp value) {
        setUpdatedat(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhotographerRecord values(Integer value1, String value2, String value3, PhotographerCategory value4, String value5, Timestamp value6, Timestamp value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PhotographerRecord
     */
    public PhotographerRecord() {
        super(Photographer.PHOTOGRAPHER);
    }

    /**
     * Create a detached, initialised PhotographerRecord
     */
    public PhotographerRecord(Integer id, String userid, String name, PhotographerCategory category, String location, Timestamp createdat, Timestamp updatedat) {
        super(Photographer.PHOTOGRAPHER);

        set(0, id);
        set(1, userid);
        set(2, name);
        set(3, category);
        set(4, location);
        set(5, createdat);
        set(6, updatedat);
    }
}
