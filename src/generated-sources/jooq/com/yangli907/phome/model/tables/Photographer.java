/*
 * This file is generated by jOOQ.
*/
package com.yangli907.phome.model.tables;


import com.yangli907.phome.model.Keys;
import com.yangli907.phome.model.Phollow;
import com.yangli907.phome.model.enums.PhotographerCategory;
import com.yangli907.phome.model.tables.records.PhotographerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Photographer extends TableImpl<PhotographerRecord> {

    private static final long serialVersionUID = -1906113193;

    /**
     * The reference instance of <code>phollow.photographer</code>
     */
    public static final Photographer PHOTOGRAPHER = new Photographer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhotographerRecord> getRecordType() {
        return PhotographerRecord.class;
    }

    /**
     * The column <code>phollow.photographer.id</code>.
     */
    public final TableField<PhotographerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>phollow.photographer.userId</code>.
     */
    public final TableField<PhotographerRecord, String> USERID = createField("userId", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>phollow.photographer.name</code>.
     */
    public final TableField<PhotographerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>phollow.photographer.category</code>.
     */
    public final TableField<PhotographerRecord, PhotographerCategory> CATEGORY = createField("category", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.yangli907.phome.model.enums.PhotographerCategory.class), this, "");

    /**
     * The column <code>phollow.photographer.location</code>.
     */
    public final TableField<PhotographerRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>phollow.photographer.createdAt</code>.
     */
    public final TableField<PhotographerRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>phollow.photographer.updatedAt</code>.
     */
    public final TableField<PhotographerRecord, Timestamp> UPDATEDAT = createField("updatedAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>phollow.photographer</code> table reference
     */
    public Photographer() {
        this("photographer", null);
    }

    /**
     * Create an aliased <code>phollow.photographer</code> table reference
     */
    public Photographer(String alias) {
        this(alias, PHOTOGRAPHER);
    }

    private Photographer(String alias, Table<PhotographerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Photographer(String alias, Table<PhotographerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Phollow.PHOLLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PhotographerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PHOTOGRAPHER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PhotographerRecord> getPrimaryKey() {
        return Keys.KEY_PHOTOGRAPHER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PhotographerRecord>> getKeys() {
        return Arrays.<UniqueKey<PhotographerRecord>>asList(Keys.KEY_PHOTOGRAPHER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Photographer as(String alias) {
        return new Photographer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Photographer rename(String name) {
        return new Photographer(name, null);
    }
}
